# This file is to find out whether a list contains existentials.
PREFIX : <http://f4w.restdesc.org/demo#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>
PREFIX tmpl: <http://purl.org/restdesc/http-template#>
PREFIX http: <http://www.w3.org/2011/http#>
PREFIX prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>


#Body is simple 
{?body :test ?body2} 
<=
{
?body2 e:label ?l.
?body e:notLabel ?o.
}.

{?body :test ?body2} 
<=
{
?body2 e:notLabel ?l.
?body2 log:rawType ?type.
?type log:notEqualTo log:Formula, rdf:List.
}.



#Body is a list

{?body :test ?body2} 
<=
{
?body2 log:rawType rdf:List.
() prolog:cut true.
?body :groundCopy ?body2.
}.


{() :groundCopy ().}
<=
{}.

{
?body :groundCopy ?body2.
}
<=
{
?body2 list:first ?fst2.
?body list:first ?fst.

?fst2 :predcheck ?fst.

() prolog:cut true.

?body2 list:rest ?rest2.
?body  list:rest ?rest.

?rest :groundCopy ?rest2. 
}.


#case: body is a graph
{?body :test ?body2} 
<=
{
?body2 log:rawType log:Formula.
() prolog:cut true.
?body2 e:graphList ?rc.
?body e:graphList ?gc.
?rc :checkGraphList ?gc.

}.


{
() :checkGraphList ?x.
}
<=
{
}.


{
?rc :checkGraphList ?gc.
}
<=
{
?rc list:first  ?fst2.
?rc list:rest  ?rest2.

?gc list:first  ?fst.
?gc list:rest  ?rest.



?fst2 log:equalTo {?a ?b ?c}.
?fst log:equalTo {?a1 ?b1 ?c1}.

?b :predcheck ?b1.
?a :predcheck ?a1.
?c :predcheck ?c1.

() prolog:cut true.
?rest2 :checkGraphList ?rest.
}.

#checking predicate

{?b2 :predcheck ?b1}
<=
{
?b2 e:notLabel ?l.
?b2 log:rawType ?type.
?type log:notEqualTo log:Formula, rdf:List.
() prolog:cut true.
}.

{?b2 :predcheck ?b1}
<=
{
?b2 e:label ?l.
() prolog:cut true.
?b1 e:notLabel ?o.
}.

{?b2 :predcheck ?b1}
<=
{
?b2 e:notLabel ?l.
?b2 log:rawType rdf:List.
() prolog:cut true.
?b1 :groundCopy ?b2.
}.


{?b2 :predcheck ?b1}
<=
{
?b2 e:notLabel ?l.
?b2 log:rawType log:Formula.
() prolog:cut true.
?b2 e:graphList ?rc.
?b1 e:graphList ?gc.
?rc :checkGraphList ?gc.
}.


{?y :check ?post}
<=
{?y log:notIncludes {?x :check ?z}. () prolog:cut true}.


{?y :check ?post}
<=
{
?y log:includes {?x :check ?z}. 
() prolog:cut true. 
?post log:includes {?xx :check ?zz}.
?z :test ?zz.
}.




{?y :bodyCheck ?post.}
<={
?y log:includes {?z http:body ?body}.
() prolog:cut true.
?post log:includes {?zz http:body ?body2}.
?body :test ?body2.
}.

{?y :bodyCheck ?post.}
<={
?y log:notIncludes {?z http:body ?body}.
() prolog:cut true.
}.


