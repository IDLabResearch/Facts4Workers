@prefix : <http://f4w.restdesc.org/demo#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix tmpl: <http://purl.org/restdesc/http-template#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix out: <http://f4w.restdesc.org/demo/.well-known/genid/f3ed8675-47ce-42f1-ac89-9082b146b6db#>.

# TODO: use API namespaces for predicates

# API 1 (get all open reports)
{
    log:Truth
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://thermolympic-demo.herokuapp.com/reports?open=true");
              http:resp [
                  http:body _:list
              ].
    # TODO: hotfix to help with output parsing, should not be necessary
    _:x a :reportList;
        :content _:list.
}.

# API USER 1 (send all reports and ask for which defect he wants to look at)
{
    ?x a :reportList;
       :content ?list.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getDefect");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Please provide the report ID you want to investigate.";
                  :reportList ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id ?n
    ]}.
    _:report a :report;
             :id ?n.
}.

# TODO: this can be extracted from the reportlist
# API 2 (get the full report information)
{
    ?report a :report;
            :id ?n.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://thermolympic-demo.herokuapp.com/reports/" ?n);
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :defect_id ?d;
        :operator ?o;
        :status ?s
    ]}.
    ?report :defect_id ?d;
            :operator ?o;
            :status ?s.
}.

# API 3 (get all solutions for a defect)
{
    ?report a :report;
            :defect_id ?d.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://thermolympic-demo.herokuapp.com/solutions?defect_id=" ?d);
              http:resp [
                  http:body _:list
              ].
    ?report :solutions _:list.
}.


# API USER 2 (send all solutions and ask the worker for the adopted solution)
{
    ?report a :report;
            :solutions ?list.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getSolution");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Please provide the adopted solution.";
                  :solutions ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :solution ?sol; # either an object { "id": 5 } or { "solution": "...", "comment": "..." }
        :result ?result;
        :comment ?comment
    ]}.
    ?report :adopted_solution _:adopted.
    _:adopted :solution_used ?sol;
              :result ?result;
              :comment ?comment.
}.
# needs to be outside of the API rule to not end up in the actual data with skolemized URIs for all possible contents
{
    ?x :solution_used ?sol.
    ?sol e:label ?label. # only necessary when ?sol isn't grounded, if it is we have the actual object
}
=>
{
    ?x :solution_used {[
        :id _:id
    ]}.
    ?x :solution_used {[
        :solution _:solution;
        :comment _:comment
    ]}.
}.

# POST solution if it didn't exist yet
{
    ?report a :report;
            :id ?n;
            :defect_id ?d;
            :adopted_solution ?adopted.
    ?adopted :solution_used ?sol.
    ?sol log:includes {
        ?s :solution ?sol_text;
           :comment ?sol_comment.
    }
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://thermolympic-demo.herokuapp.com/solutions");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :defect_id ?d;
                  :solution ?sol_text;
                  :comment ?sol_comment
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id ?id # TODO: should check if we actually get this back, we should though
    ]}.
    ?adopted :solution_used {[ :id ?id ]}.
}.

# POST adopted solution
{
    ?report a :report;
            :id ?n;
            :defect_id ?d;
            :operator ?o;
            :adopted_solution ?adopted.
    ?adopted :solution_used ?sol;
             :result ?result;
             :comment ?comment.
    ?sol log:includes { ?s :id ?solution_id. }
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://thermolympic-demo.herokuapp.com/adopted_solutions");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :report_id ?n;
                  :solution_id ?solution_id;
                  :operator ?o;
                  :result ?result;
                  :comment ?comment
              ]}.
    ?adopted :is :posted.
}.