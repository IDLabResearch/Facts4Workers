
# http://docs.facts4.work/oauth_building_block.html

@prefix auth: <http://f4w.restdesc.org/demo/authorization#>.
@prefix json: <http://restdesc.org/json#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix tmpl: <http://purl.org/restdesc/http-template#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix util: <http://f4w.restdesc.org/util#>.
@prefix rest: <http://restdesc.org/rest#>.
@prefix prov: <http://www.w3.org/ns/prov#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#>.

{
    log:Truth
}
=>
{
    _:request http:methodName "GET";
#TODO: change HIR document, athorization instead of logInData
              tmpl:requestURI ("http://askTheWorker/authorization");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:resp [
                  http:body _:body
              ].
    _:body rest:contains { rest:json
        json:username _:username;
        json:password _:password
    }.
    _:user a auth:user;
           auth:username _:username;
           auth:password _:password.
    
}.


{
    ?user a auth:user;
          auth:username ?name;
          auth:password ?password.
    #?user util:onlyOnce auth:id. 
}
=>
{
    #?user util:onlyOnceTest auth:id.
    _:request http:methodName "POST";
              tmpl:requestURI ("https://auth.facts4.work/oauth/token");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body { rest:json
                  json:username ?name;
                  json:password ?password;
                  json:grant_type "password"
              };
              http:resp [
                  http:body _:body
              ].
    _:body rest:contains { rest:json
        json:access_token  _:access_token;
        json:refresh_token _:refresh_token;
        json:created_at    _:created_at
    }.
    ?user auth:access_token  _:access_token;
          auth:refresh_token [ auth:token _:refresh_token; auth:created_at _:created_at ].
}.


{
    ?x prov:generatedAtTime ?dateTime.
}
<=
{
    ?x auth:created_at ?unix_time.
    ?unix_time e:whenGround { (?LV <http://www.w3.org/2001/XMLSchema#dateTime>) log:dtlit ?unix_time, ?dateTime. }.
}.

{
    ?user a auth:user;
          auth:access_token ?at;
          auth:refresh_token ?refresh_token.
    ?refresh_token auth:token ?token.
    ?token e:notLabel ?label.
    #?token util:onlyOnce auth:re.
    _:x e:findall (?at {?at auth:valid true. } ()) 
}
=>
{
    #?token util:onlyOnceTest auth:re.
    _:request http:methodName "POST";
              tmpl:requestURI ("https://auth.facts4.work/oauth/token");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body { rest:json
                  json:refresh_token ?token;
                  json:grant_type "refresh_token"
              };
              http:resp [
                  http:body _:body
              ].
    _:body rest:contains { rest:json
        json:refresh_token _:refresh_token;
        json:created_at    _:created_at
    }.
    ?user auth:refresh_token [ auth:token _:refresh_token; prov:generatedAtTime  _:created_at ].
}.

# TODO: insufficient if authentication over multiple APIs is required
{
    ?user a auth:user;
          auth:refresh_token ?token.
    ?token prov:generatedAtTime ?refresh_time.

    _:x e:findall (1
                   {
                     ?request http:resp ?resp.
                     ?resp prov:generatedAtTime ?time;
                           http:statusCodeValue 401.
                     (?time ?refresh_time) pred:dateTime-greater-than true.
                   }
                   ()).
}
=>
{
   ?token auth:valid true.
}.
