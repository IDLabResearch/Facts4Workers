@prefix : <http://f4w.restdesc.org/demo#>.
@prefix ofs: <http://f4w.restdesc.org/demo/offset#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix tmpl: <http://purl.org/restdesc/http-template#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix util: <http://f4w.restdesc.org/util#>.
@prefix rest: <http://f4w.restdesc.org/demo#>.
@prefix prov: <http://www.w3.org/ns/prov#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix auth: <http://f4w.restdesc.org/demo/authorization#>.
@prefix prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.


#get parts
{
    ?user auth:authenticated true.
    ?user auth:access_token ?token.
#this is to make sure that the rule does not get fired again if I have a new access token. 
#I think we could add that automatically to the rules so that the user does not need to do it
    ?user util:onlyOnce ofs:first. 
}
=>
{
    ?user util:onlyOnceTest ofs:first.
    _:request http:methodName "GET";
              tmpl:requestURI ("https://offsug.hir.facts4.work/api/v1/parts?access_token=" ?token);
              http:resp [
                  http:body _:list
              ].
    _:list a ofs:partList.
}.

#get part Id
{
    
#Here we assume that there is only one active user in the system, maybe we should be more careful here. Should we start writing an ontology?     
     ?user a auth:user.
     ?list a ofs:partList.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getPartID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {rest:json
                  :message "Please provide the ID of the part you are working with.";
                  :parts ?list
              };
              http:resp [
                  http:body _:body
              ].
    _:body :contains  { rest:json
        :id _:n
    }.
    _:part a ofs:Part.
    _:part ofs:partId _:n.
#I know, we can discuss whether we can derive that triple, but I think the API cantains a user dialog which asks soemething to a user, therefore we can keep the information the user provided
    ?user ofs:worksWith _:part.
}.


#get details for a specific part
{
    ?user auth:authenticated true.
    ?user auth:access_token ?token.
    ?user ofs:worksWith ?part.
    ?part ofs:partId ?id.
#this is to make sure that the rule does not get fired again if I have a new access token. 
#I think we could add that automatically to the rules so that the user does not need to do it
    (?user ?id) util:onlyOnce ofs:rule2. 
}
=>
{
    (?user ?id) util:onlyOnceTest ofs:rule2.
    _:request http:methodName "GET";
              tmpl:requestURI ("https://offsug.hir.facts4.work/api/v1/parts/" ?id "?access_token=" ?token);
              http:resp [
                  http:body _:list
              ].
    _:list a ofs:dimensionsList.
    ?part ofs:dimensions _:list
}.



{
    ?list a ofs:dimensionsList.
    ?part ofs:dimensions ?list
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getMeasurements");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {rest:json
                  :message "Please provide your measurements in a list. I.e.: [{'id': 1, 'measurement': 5.1}, {'id': 2, 'measurement': 2.8}]";
                  :partdetails ?list
              };
              http:resp [
                  http:body _:body
              ].
    ?part ofs:measurements _:body.
#question: do we also need a time or something? Would come in handy if we do looping
}.

{
    ?part ofs:measurements ?body.
    ?body e:label _:label
}=>{
    ?part ofs:measured _:measurement.
    _:measurement ofs:dimension _:n.
    _:measurement ofs:value  _:m
}.


{
    ?part ofs:partId ?pid;
          ofs:measurements ?list.
    ?list e:notLabel ?label.
    ?measurementGraph list:in ?list.
    ?measurementGraph log:includes { ?measurement :id ?n; :measurement ?m }.
}
=>
{
    ?part ofs:measured ?measurement.
    ?measurement ofs:dimension ?n;
                 ofs:value  ?m.
}.

{
    ?part ofs:partId ?pid;
          ofs:measurements ?list.
    ?list e:label ?label.
}
=>
{
    ?part ofs:measured _:measurement.
    _:measurement ofs:dimension _:x;
                  ofs:value _:f;
                  ofs:offsetSuggestion _:sug
}.

{  ?part ofs:partId ?pid.
   ?part ofs:measured ?measurement.
   ?measurement ofs:dimension ?n.
   ?measurement ofs:value  ?m.
   ?user auth:authenticated true.
   ?user auth:access_token ?token.
   (?pid ?n ?m) util:onlyOnce ofs:rule3.
}
=>
{
    (?pid ?n ?m) util:onlyOnceTest ofs:rule3.

    _:request http:methodName "GET";
              tmpl:requestURI ("https://offsug.hir.facts4.work/api/v1/offsets?part_id=" ?pid "&dimension_id=" ?n "&value=" ?m "&access_token=" ?token);
              http:resp [
                  http:body _:body
              ].
    _:body :contains { rest:json
        :type _:type;
        :suggestion _:sug;
        :value _:value
    }.
    ?measurement ofs:offsetType _:type;
                 ofs:offsetSuggestion _:sug;
                 ofs:offsetValue _:value
}.


#TODO: find a better solution here
#get a measurement list, maybe pass that to util?
{
    ?part ofs:results ?list.
}
<=
{
    ?part ofs:partId ?pid.
    ?part ofs:measured ?measurement.


    _:x e:findall ({rest:json :id ?d;
                              :type ?type;
                              :value ?value;
                              :suggestion ?sug
                   }
                   {?part2 ofs:partId ?pid.
                    ?part2 ofs:measured ?meas2.
                    ?meas2 ofs:dimension ?d;
                           ofs:offsetType ?type;
                           ofs:offsetSuggestion ?sug;
                           ofs:offsetValue ?value
                   }
                   ?list
    ).
   ?list util:ground true.
}.

#what we do here is really based on the datastructure we get we need another solution here
{?part ofs:results ?list.}
<=
{
?part ofs:partId ?pid.
?part ofs:measured ?measurement.
?measurement ofs:offsetSuggestion ?sug.
?measurement e:label ?sug.
?part ofs:measurements ?lis.
?lis :alloffsets ().
?list e:tuple :dummy.
}.

{() :alloffsets ().}
<=
{
}.

{?list :alloffsets ().}
<=
{
?list list:first ?fst.
?fst log:includes {?m :measurement ?ms}.
?m ofs:dimension ?d;
   ofs:offsetType ?type;
   ofs:offsetSuggestion ?sug;
   ofs:offsetValue ?value.
?list list:rest ?rest.
?rest :alloffsets ().
}.




#TODO: find a better solution here

{
    ?part ofs:results ?list.
}
<=
{
    ?part ofs:partId ?pid.
    ?part ofs:measured ?measurement.
    ?measurement e:label _:l.
   ?measurement ofs:offsetSuggestion ?sug.
    ?list e:tuple :dummy.
}.


{
    ?user ofs:worksWith ?part.
    ?part ofs:results ?list.
}
=>{

    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/showCheckResult");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body { rest:json
                  :message "Here the results of the offset check.";
                  :results ?list
              }.
    ?list ofs:displayedTo ?user.
}.
