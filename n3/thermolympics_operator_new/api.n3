# https://thermolympic-demo.herokuapp.com/api_doc/

@prefix : <http://f4w.restdesc.org/demo#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix tmpl: <http://purl.org/restdesc/http-template#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix out: <http://f4w.restdesc.org/demo/.well-known/genid/f3ed8675-47ce-42f1-ac89-9082b146b6db#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.


:thereIsADefect a :problem.
:thereIsADefect :trySolution :firstTry.


#todo: find a smarter solution to also use the skills not just the names
#get operator names
{
    log:Truth.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://skillp.tho.f4w.l0g.in/api/operator_skills/");
              http:resp [
                  http:body _:list
              ].
   _:list a :operatorlist.
}.


{
    ?list a :operatorlist.
    ?problem a :problem.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getOperatorID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Who are you? Please send your id from the list.";
                  :sendList ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {
        [:id _:n]
    }.
    _:newOperatorURI a :operator;
        :operatorId _:n;
        :foundProblem ?problem.
}.

#get machine id list
{
    log:Truth.
}
=>{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://mstate.tho.f4w.l0g.in/api/machines");
              http:resp [
                  http:body _:list
              ].
    _:list a :machineList.
}.

#get machine id
{
    ?list a :machineList.
    ?operator :foundProblem ?problem.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getMachineID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              :check ?operator;
              http:body {[
                  :message "On what machine are you working?";
                  :sendList ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {
        _:operator  :id _:n
    }.
    _:newMachineURI a :machine;
                    :machineID _:n.
    ?problem :occurredOnMachine _:newMachineURI.
}.

# API USER 1 (ask for a part ID, might want to send all available part IDs but no API for this atm)
{
    ?problem :occurredOnMachine ?machine. ?machine :machineID ?mid.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getPartID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Please provide the ID of the part on which the problem occurred.";
                  :machine ?mid;
                  :parts ( 1 2 )
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id _:n
    ]}.
    ?problem :occurredOnPartWithID _:n.
}.

#Problem is HERE
#get defect id list
{  
?problem :occurredOnPartWithID ?p
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://defects.tho.f4w.l0g.in/api/defects?part_id=" ?p);
              http:resp [
                  http:body _:list2
              ].
    _:list2 a :defectList.
}.

# API USER 2 (ask the user for a defect id)
{
    ?list a :defectList.
    ?operator :foundProblem ?problem.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getDefectID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Please report the defect.";
                  :sendList ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id _:d;
    ]}.
    ?problem :defect _:d. 
}.


#get solution id list
{
    ?problem :defect ?id;
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://defects.tho.f4w.l0g.in/api/solutions?defect_id=" ?id);
              http:resp [
                  http:body _:list
              ].
    _:list a :solutionList.
}.

#choose a solution
{
    ?list a :solutionList.
    ?problem :trySolution ?sol.
}=>{
    _:request http:methodName "GET";
              :check ?sol;
              tmpl:requestURI ("http://askTheWorker/getSolutionID");
              http:headers ([ http:fieldName "Content-Type" ; http:fieldValue "application/json" ]);
              http:body {[
                  :message "Choose one of the following solutions.";
                  :sendList ?list
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id _:d;
    ]}.
    ?sol :solutionId _:d.
}.

#solution has no result yet?
{
    ?solution :solutionId ?id.
    _:x e:findall (?solution {?solution :triedAndReported "yes"} ()).
}
=>
{
    ?solution :triedAndReported "no"
}.


#get operator skills
{
    ?operator :foundProblem ?problem;
:operatorId ?id.
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://skillp.tho.f4w.l0g.in/api/operator_skills/" ?id);
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :skills {[ :machine _:m; :tool _:t; :computer _:c]}
    ]}.
    ?operator :machineSkills _:m;
        :toolSkills _:t;
        :computerSkills _:c.
}.

#get skills required for solution
{
    ?problem :defect ?id;
             :trySolution ?solution.
    ?solution :solutionId ?sid.
    ?solution :requiredSkillsKnown "no".
}=>{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://defects.tho.f4w.l0g.in/api/solutions/" ?sid);
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :skill {[ :machine _:m; :tool _:t; :computer _:c]}
    ]}.
    ?solution :reqMachineSkills _:m;
         :reqToolSkills _:t;
         :reqComputerSkills _:c. #problem: sometimes no computer value
    ?solution :requiredSkillsKnown ?yes. #please ground with "yes"
}.


{
    ?problem :defect ?id;
             :trySolution ?solution.
    ?solution :solutionId ?sid.
    _:e e:findall(?s {?solution :requiredSkillsKnown "yes"} ()).
}
=>
{
    ?solution :requiredSkillsKnown "no".
}.


{?solution :solutionId ?sid. ?solution2 :solutionId ?sid. 
 ?solution :reqMachineSkills ?ms; :reqToolSkills ?t; :reqComputerSkills ?c. ?solution :requiredSkillsKnown "yes"
}=>{?solution2 :reqMachineSkills ?ms; :reqToolSkills ?t; :reqComputerSkills ?c. ?solution2 :requiredSkillsKnown "yes"}.




#has the machine been stopped?
{?problem :occurredOnMachine ?m. _:l e:findall (?x {?m :state "stopped1"} ()) }=>{ ?m :state "notstopped1" }.


{?problem :occurredOnMachine ?m. _:l e:findall (?x {?m :state "stopped2"} ()) }=>{ ?m :state "notstopped2" }.



#stop the machine and get id
{
    ?problem :occurredOnMachine ?m.
    ?m :machineID ?machineID.
    ?m :state "notstopped2";
       :state "notstopped1".
    ?operator :foundProblem ?problem;
         :operatorId ?wid;
         :machineSkills ?wm;
         :toolSkills ?wt;
         :computerSkills ?wc.

    ?problem :trySolution ?solution.
    ?solution :solutionId ?id;
              :triedAndReported "no".
    ?solution :reqMachineSkills ?ms; :reqToolSkills ?t; :reqComputerSkills ?c.

    (?wm ?wt ?wc ?ms ?t ?c) e:whenGround (?wm2 ?wt2 ?wc2 ?m2 ?t2 ?c2).

   (?wm2 ?wt2 ?wc2) :match (?m2 ?t2 ?c2).
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://mstate.tho.f4w.l0g.in/api/machines/" ?machineID "/events");
              :check (?wm ?ms);
              http:body {[
                  :name "Stop the machine";
                  :desc "Stoping the machine after a defect was spotted!";
                  :machine_state "4";
                  :operator_id ?wid
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id _:e
    ]}.
    {?m :state _:stopped1.} :eventId _:e.
    ?m :state _:stopped1. #please put "stopped1" here when grounding.
}.

{
    ?problem :trySolution ?solution.
    ?solution :solutionId ?id.
    _:e e:findall (?solution {?solution :tried "yes"} ()).
}
=>
{
    ?solution :tried "no"
}.

{?solution :worked true.}=>{?solution :tried "yes"}.
{?solution :worked false.}=>{?solution :tried "yes"}.

# report the result
{
    ?operator:foundProblem ?problem;
         :operatorId ?wid;
         :machineSkills ?wm;
         :toolSkills ?wt;
         :computerSkills ?wc.

    ?problem :occurredOnMachine ?m.
    {?m :state ?stopped1.} :eventId ?e.
    ?problem :trySolution ?solution.
    ?solution :solutionId ?id;
              :tried "no";
              :triedAndReported "no".
    ?solution :reqMachineSkills ?ms;
        :reqToolSkills ?t;
        :reqComputerSkills ?c.

    (?wm ?wt ?wc ?ms ?t ?c) e:whenGround (?wm2 ?wt2 ?wc2 ?m2 ?t2 ?c2).

    (?wm2 ?wt2 ?wc2) :match (?m2 ?t2 ?c2).
}
=>
{
    _:request http:methodName "GET";
              tmpl:requestURI ("http://askTheWorker/getReport");
              :check (?wm ?ms);
              http:body {[
                  :message "Report the outcome.";
                  :solutionId ?id
              ]};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :solved _:tf;
        :comment _:comment
    ]}.
    ?solution :worked _:tf;
              :comment _:comment.
}.


# skill-matching
{
    (?wm ?wt ?wc) :match (?m ?t ?c).
}
<=
{
    ?m math:notGreaterThan ?wm.
    ?t math:notGreaterThan ?wt.
    ?c math:notGreaterThan ?wc.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?t math:greaterThan ?wt.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?m math:greaterThan ?wm.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?c math:greaterThan ?wc.
}.


# POST solution intent
{
    ?operator :foundProblem ?problem;
              :operatorId ?wid.
    ?problem :trySolution ?solution.
 ?problem :occurredOnMachine ?mid.
    ?solution :solutionId ?sid;
              :worked ?truesfalse;
              :comment ?comment.
    ?truefalse e:whenGround true.
    {?mid :state ?stopped.} :eventId ?eid.
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://defects.tho.f4w.l0g.in/api/reports");
              http:body {[
                     #I am not sure, but maybe this answers to the machine stopped event?
                    :event_id ?eid;
                    :operator_id ?wid;
                    :solution_id ?sid;
                    :success ?truefalse;
                    :comment ?comment
              ]}.
    ?solution :triedAndReported _:yes. #put "yes"

}.


# POST solution intent
{
    ?operator :foundProblem ?problem;
              :operatorId ?wid.
    ?problem :trySolution ?solution.
    ?solution :solutionId ?sid;
              :worked ?tf;
              :comment ?comment.
    ?yn e:whenGround false.
    {?mid :state ?stopped.} :eventId ?eid.
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://defects.tho.f4w.l0g.in/api/reports");
              http:body {[
                     #I am not sure, but maybe this answers to the machine stopped event?
                    :event_id ?eid;
                    :operator_id ?wid;
                    :solution_id ?sid;
                    :result ?yn;
                    :comment ?comment
              ]}.
    ?solution :triedAndReported _:yes. #put "yes"
    _:newSolution a :Solution.
    ?problem :trySolution _:newSolution.

}.


{
    ?solution :triedAndReported ?yes;
              :worked ?tf.
    ?yes e:whenGround "yes".
    ?tf e:whenGround true.
    ?problem :occurredOnMachine ?machine.
    ?machine :machineID ?mid.
     ?problem        :trySolution ?solution.
   ?operator :foundProblem ?problem;
              :operatorId ?wid.
}
=>
{
    _:request http:methodName "POST";
              :check (?yn ?yes);
              tmpl:requestURI ("http://mstate.tho.f4w.l0g.in/api/machines/" ?mid "/events");
              http:body {[
                     #I am not sure, but maybe this answers to the machine stopped event?
                    :name "Starting the machine";
                    :desc "Starting the machine after a solution was successfully applied!";
                    :operator_id ?wid;
                    :machine_state "1"
              ]}.
     ?machine :newState _:state.
    ?problem :finalState :solved. 
}.


{
    ?problem :occurredOnMachine ?mid.
    ?mid :state "notstopped2".
    ?operator :foundProblem ?problem;
         :operatorId ?wid;
         :machineSkills ?wm;
         :toolSkills ?wt;
         :computerSkills ?wc.

    ?problem :trySolution ?solution.
    ?solution :solutionId ?id;
              :triedAndReported "no".
    ?solution :reqMachineSkills ?m;
        :reqToolSkills ?t;
        :reqComputerSkills ?c.

    (?wm ?wt ?wc ?m ?t ?c) e:whenGround (?wm2 ?wt2 ?wc2 ?m2 ?t2 ?c2).

    (?wm2 ?wt2 ?wc2) :noMatch (?m2 ?t2 ?c2).
}
=>
{
    _:request http:methodName "POST";
              tmpl:requestURI ("http://mstate.tho.f4w.l0g.in/api/machines/:" ?mid "/events");
              http:body {[
                  :name "waiting_for_teamleader";
                  :desc "Stoping the machine. Problem has to be fixed by the team leader.";
                  #TODO: put the right machine state
                  :machine_state "3";
                  :operator_id ?wid;
              ].};
              http:resp [
                  http:body _:body
              ].
    _:body :contains {[
        :id _:e
    ]}.

    {?mid :state _:stopped2.} :eventId _:e.
    ?mid :state _:stopped2. #please put "stopped2" here when grounding.
    ?problem :finalState :sentToTeamleader.
     ?mid :stateTL _:tl.
}.

{
 ?problem :finalState :solved.
?problem :occurredOnMachine ?m.
?m :machineID ?mid.
?m :newState ?state.
}=>{
_:request tmpl:requestURI ("http://askTheWorker/YouAreDone");
              :check ?state;
              http:body {[
                  :message "Problem Solved.";
                  :problem ?problem;
                  :machine ?mid
                 
           
              ]}.

?problem :tellTheWorker "solved".
}.


{
?problem :finalState :sentToTeamleader.
?problem :occurredOnMachine ?m.
?m :stateTL ?tl.
}=>{
_:request tmpl:requestURI ("http://askTheWorker/SentToTeamLeader");
              :check ?tl;
              http:body {[
                  :message "Teamleader was notified."
           
              ]}.

?problem :tellTheWorker ?stopped2.
}.









