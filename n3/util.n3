@prefix : <http://f4w.restdesc.org/util#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

# LOOPING
{
    ?thingy :loop true;
            e:label ?label. # rule is only necessary for blank looping nodes
    ("LOOP" ?thingy) string:concatenation ?uri.
    ?looped log:uri ?uri.

    _:x e:findall({?looped ?a ?b} {?thingy ?a ?b} ?results).
    ?results log:conjunction ?conjunction.
}
=>
?conjunction.


# FILTERING
# TODO: what if the ?list is ground but some parts of ?pattern haven't been filled in correctly yet?
{
    ( ?list ?pattern ) :filter ?e.
}
<=
{
    ?list e:label ?label.
    ?e e:tuple :dummy.
}.

{
    ( () ?pattern ) :filter ().
}
<=
{}.

{
    ( ?list ?pattern ) :filter ?result.
}
<=
{
    ?list e:notLabel ?label.
    ?list list:first ?first.
    ({({?first log:includes ?pattern.}) prolog:not_provable true.}) prolog:not_provable true. # do not ask
    ?list list:rest ?rest.
    ( ?rest ?pattern ) :filter ?filteredRest.

    ((?first) ?filteredRest) list:append ?result.
}.

{
    ( ?list ?pattern  ) :filter ?result.
}
<=
{
    ?list e:notLabel ?label.
    ?list list:first ?first.
    ?first log:notIncludes ?pattern.

    ?list list:rest ?rest.
    ( ?rest ?pattern ) :filter ?result.
}.

# SELECTING
{
    (?list ?idx) :select ?e.
}
<=
{
    ?list e:label ?label.
    ?e e:tuple :dummy.
}.

{
    (() ?idx) :select ?e.
}
<=
{
    ?e e:tuple :dummy.
}.

{
    (?list ?idx) :select ?e.
}
<=
{
    (?idx ?list ?e) prolog:nth0 true.
}.


#skill matching
{
    (?wm ?wt ?wc) :match (?m ?t ?c).
}
<=
{
    ?m math:notGreaterThan ?wm.
    ?t math:notGreaterThan ?wt.
    ?c math:notGreaterThan ?wc.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?t math:greaterThan ?wt.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?m math:greaterThan ?wm.
}.

{
    (?wm ?wt ?wc) :noMatch (?m ?t ?c).
}
<=
{
    ?c math:greaterThan ?wc.
}.



#onlyOnce
{?x :onlyOnce ?y}
<=
{
?x :onlyOnceTest ?y.
() prolog:cut true.
() prolog:fail true.
}.

{?x :onlyOnce ?y}<={}.

#Tests whether everything in a list is ground

{() :ground true}
<={}.

{?list :ground true }
<=
{
?list list:first ?fst.
?list list:rest ?rest.
?fst log:rawType ?type.
?type log:notEqualTo log:Formula, rdf:List.
?fst e:notLabel ?label.

?rest :ground true.
}.

{?list :ground true }
<=
{
?list list:first ?fst.
?list list:rest ?rest.
?fst log:rawType rdf:List.
?fst :ground true.

?rest :ground true.
}.

{?list :ground true }
<=
{
?list list:first ?fst.
?list list:rest ?rest.
?fst log:rawType log:Formula.
?fst e:graphList  ?graphlist. 
?graphlist :groundGL true.
?rest :ground true.
}.

#tests whether everything in a graphlist is ground
{
() :groundGL true.
}<={
}.

{
?list :groundGL true.
}<={
?list list:first ?fst.
?list list:rest ?rest.
?fst log:equalTo {?s ?p ?o}.
(?s ?p ?o) :ground true.
?rest :groundGL true.
}.















